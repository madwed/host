schema {
  query: RootQueryType
  mutation: Mutation
}

input CreateIngredientInput {
  edgeCount: Int!
  ingredientSetId: ID!
  clientMutationId: String
}

type CreateIngredientPayload {
  ingredientEdge: IngredientConnectionEdge
  ingredientSet: IngredientSet
  clientMutationId: String
}

input DestroyIngredientInput {
  id: ID!
  ingredientSetId: ID!
  clientMutationId: String
}

type DestroyIngredientPayload {
  destroyedIngredientId: ID!
  ingredientSet: IngredientSet
  clientMutationId: String
}

input DestroyIngredientSetInput {
  id: ID!
  clientMutationId: String
}

type DestroyIngredientSetPayload {
  destroyedIngredientSetId: ID!
  recipe: Recipe
  clientMutationId: String
}

type Direction implements Node {
  # The ID of an object
  id: ID!
  displayOrder: Int
  text: String
}

# A connection to a list of items.
type DirectionConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DirectionConnectionEdge]
}

# An edge in a connection.
type DirectionConnectionEdge {
  # The item at the end of the edge
  node: Direction

  # A cursor for use in pagination
  cursor: String!
}

type DirectionSet implements Node {
  # The ID of an object
  id: ID!
  directions(after: String, first: Int, before: String, last: Int): DirectionConnectionConnection
  displayOrder: Int

  # The ID of an object
  recipeId: ID!
  title: String
}

# A connection to a list of items.
type DirectionSetConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [DirectionSetConnectionEdge]
}

# An edge in a connection.
type DirectionSetConnectionEdge {
  # The item at the end of the edge
  node: DirectionSet

  # A cursor for use in pagination
  cursor: String!
}

type Ingredient implements Node {
  # The ID of an object
  id: ID!

  # The ID of an object
  ingredientSetId: ID!
  displayOrder: Int
  quantity: String
  text: String
}

# A connection to a list of items.
type IngredientConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IngredientConnectionEdge]
}

# An edge in a connection.
type IngredientConnectionEdge {
  # The item at the end of the edge
  node: Ingredient

  # A cursor for use in pagination
  cursor: String!
}

type IngredientSet implements Node {
  # The ID of an object
  id: ID!
  displayOrder: Int
  ingredients(after: String, first: Int, before: String, last: Int): IngredientConnectionConnection

  # The ID of an object
  recipeId: ID!
  title: String
}

# A connection to a list of items.
type IngredientSetConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IngredientSetConnectionEdge]
}

# An edge in a connection.
type IngredientSetConnectionEdge {
  # The item at the end of the edge
  node: IngredientSet

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  createIngredient(input: CreateIngredientInput!): CreateIngredientPayload
  destroyIngredient(input: DestroyIngredientInput!): DestroyIngredientPayload
  destroyIngredientSet(input: DestroyIngredientSetInput!): DestroyIngredientSetPayload
  updateIngredient(input: UpdateIngredientInput!): UpdateIngredientPayload
  updateIngredientSet(input: UpdateIngredientSetInput!): UpdateIngredientSetPayload
  updateRecipe(input: UpdateRecipeInput!): UpdateRecipePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Recipe implements Node {
  # The ID of an object
  id: ID!
  activeTime: String
  description: String
  directionSets(after: String, first: Int, before: String, last: Int): DirectionSetConnectionConnection
  favorite: Boolean
  imageUrl: String
  ingredientSets(after: String, first: Int, before: String, last: Int): IngredientSetConnectionConnection
  note: String
  originalUrl: String
  servings: String
  source: String
  title: String
  totalTime: String
}

# A connection to a list of items.
type RecipeConnectionConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RecipeConnectionEdge]
}

# An edge in a connection.
type RecipeConnectionEdge {
  # The item at the end of the edge
  node: Recipe

  # A cursor for use in pagination
  cursor: String!
}

type RootQueryType {
  viewer(token: String!): User
}

input UpdateIngredientInput {
  id: ID!
  quantity: String
  text: String
  clientMutationId: String
}

type UpdateIngredientPayload {
  ingredient: Ingredient
  clientMutationId: String
}

input UpdateIngredientSetInput {
  id: ID!
  title: String
  clientMutationId: String
}

type UpdateIngredientSetPayload {
  ingredientSet: IngredientSet
  clientMutationId: String
}

input UpdateRecipeInput {
  activeTime: String
  description: String
  id: ID!
  imageUrl: String
  note: String
  originalUrl: String
  servings: String
  source: String
  title: String
  totalTime: String
  clientMutationId: String
}

type UpdateRecipePayload {
  recipe: Recipe
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  recipe(id: String): Recipe
  recipes(after: String, first: Int, before: String, last: Int): RecipeConnectionConnection
}
